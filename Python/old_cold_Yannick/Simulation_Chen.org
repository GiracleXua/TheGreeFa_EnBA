#+TITLE: Python script for the simulation of an adiabatic absorber model
#+AUTHOR: Yannick FÃ¼rst
#+EMAIL: yannick.fuerst@tu-berlin.de

#+LATEX_CLASS: hri-class
#+LATEX_CLASS_OPTIONS: [article,a4paper,oneside,11pt,font=lmodern,language=english,titlepage=default,chapterstyle=article,pagestyle=default,bibliography=authoryear,theorem=colorbox,minted=true]
#+PROPERTY: header-args :comments org
#+OPTIONS: toc:nil num:2
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \def\mdseries@tt{m}
#+LATEX_HEADER: \makeatother
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \hyphenation{multi-pro-cessing}
#+LATEX_HEADER: \bibliography{./literature}
#+LATEX_CMD: pdflatex

* General information

This Python script is written in Python 3 and uses the =buildingspy= package
from [[http://simulationresearch.lbl.gov/modelica/buildingspy/][Berkeley]]. It can be installed executing

#+BEGIN_SRC sh :tangle no
pip install buildingspy
#+END_SRC
in a terminal. The =buildingspy= package is written in Python 2. This
script uses Python 3 and incompatibilities might occur. The Python script that
performs the simulation can be tangled from this org file using =C-c C-v t=.

* Simulation with boundary conditions from literature
** Header

The object =simulator= is imported from the =buildingspy=. The
=multiprocessing= library provides the =Pool= object, which is used for
parallel computing.

#+BEGIN_SRC python :tangle no
import buildingspy.simulate.Simulator as si
from multiprocessing import Pool
import numpy as np
import os
#+END_SRC

#+BEGIN_SRC python :tangle Simulation_Chen.py :noweb yes :exports none
import buildingspy.simulate.Simulator as si
from multiprocessing import Pool
import numpy as np
import os


<<simulate_case>>

<<simulate_translated>>

<<main>>

<<run_script>>
#+END_SRC

** Function to start simulation

This function starts the actual simulation. The simulation time is set
to one hour in order to guarantee steady state conditions. If it does not
finish in under 10 minutes, the process will be killed. The default solver
=dassl= is used.

#+NAME: simulate_case
#+BEGIN_SRC python :tangle no
def simulateCase(s):
    s.setStopTime(7200)
    s.setTimeOut(3600)
    s.setSolver("dassl")
    s.showProgressBar(False)
    s.printModelAndTime()
    s.simulate()

#+END_SRC

** Function to simulate translated model

The compilation of the model takes some time. A recompilation is not needed
when only parameters of the model change. Therefore this function is defined to
not translate again.

#+NAME: simulate_translated
#+BEGIN_SRC python :tangle no
def simulateTranslatedModel(s):
    s.setStopTime(7200)
    s.setTimeOut(3600)
    s.setSolver("dassl")
    s.showProgressBar(False)
    s.printModelAndTime()
    s.simulate_translated()

#+END_SRC

** Main function

The main function calls the function =simulateCase= and changes the working
directory to the root directory of this project. The path of the model to be
simulated is assigned to the variable =model_path=. The empty list =li= is
created for the different simulation cases.

#+BEGIN_SRC python :tangle no
def main():
    bib_path = os.path.join(os.path.expanduser("~"),
                            "Dokumente", "git", "BrineGrid")
    os.chdir(bib_path)
    model_path = ("BrineGrid.Fluid.Absorbers.Examples."
                  "Validation.LiCl_Chen_2016_Dehumdification")

    li = []
#+END_SRC

#+NAME: main
#+BEGIN_SRC python :noweb yes :tangle no :exports none
def main():
    bib_path = os.path.join(os.path.expanduser("~"),
                            "Dokumente", "git", "BrineGrid")
    os.chdir(bib_path)
    model_path = ("BrineGrid.Fluid.Absorbers.Examples."
                  "Validation.LiCl_Chen_2016_Dehumdification")

    li = []

    <<boundary_conditions>>

    <<simulation>>
#+END_SRC

\noindent The boundary conditions are set according to
cite:chen-2016-exper-theor. Required parameters are the air inlet temperature
$T_{\mathrm{air}}$, the desiccant inlet temperature $T_{\mathrm{des}}$, the
inlet mass flow rates $\dot{m}_{\mathrm{air}}$ and $\dot{m}_{\mathrm{des}}$,
the air inlet humidity $x$ and the desiccant concentration $X$. The air
humidity is transformed to a concentration in mass percent.

#+NAME: boundary_conditions
#+BEGIN_SRC python :tangle no
T_air = np.array([25.6, 28.6, 27.5, 30.0, 27.6,
                  21.7, 22.7, 24.7, 23.3, 24.0,
                  24.2, 25.1, 25.2, 25.9, 25.6]) + 273.15
T_abs = np.array([14.9, 18.2, 17.7, 18.9, 17.3,
                  9.5, 12.6, 15.5, 14.7, 16.8,
                  17.7, 18.1, 17.8, 19.2, 18.4]) + 273.15
m_flow_air = np.array([1.85, 1.87, 1.92, 1.89, 1.92,
                       2.04, 1.97, 1.96, 1.99, 1.94,
                       1.98, 1.94, 1.95, 1.99, 1.93])
m_flow_abs = np.array([2.61, 2.63, 2.65, 2.66, 2.67,
                       2.93, 2.76, 2.77, 2.80, 2.82,
                       2.85, 2.90, 2.85, 2.86, 2.88])
x = np.array([16.2, 20.2, 18.1, 17.7, 16.4,
              10.8, 15.3, 15.3, 14.3, 15.2,
              16.0, 15.2, 14.3, 15.9, 14.3])
X_w = x/1000.0/(x/1000.0 + 1.0)
X_s = np.array([0.2300, 0.2400, 0.2550, 0.2600, 0.2700,
                0.2513, 0.2600, 0.2700, 0.2850, 0.2961,
                0.3007, 0.3052, 0.3182, 0.3215, 0.3312])
#+END_SRC

\noindent The different simulation cases are constructed in a loop and appended
to the list =li=. If the output directory is not existing, it will be
created. The boundary conditions defined above are handed to the model together
with the discretization parameters =nNodes= and =mNodes= in vertical and
horiziontal direction. The completed list with all simulation cases is then
handed to the =Pool= object, which executes the simulations parallel.

#+NAME: simulation
#+BEGIN_SRC python :tangle no
for i in range(len(T_air)):
    if not os.path.exists(os.path.join(bib_path,
                                       "Extras",
                                       "Python",
                                       "Results",
                                       "Case_{}".format(str(i + 1)))):
        os.makedirs(os.path.join(bib_path,
                                 "Extras",
                                 "Python",
                                 "Results",
                                 "Case_{}".format(str(i + 1))))
    s = si.Simulator(model_path,
                     "dymola",
                     os.path.join(bib_path,
                                  "Extras",
                                  "Python",
                                  "Results",
                                  "Case_{}".format(str(i + 1))))
    s.addParameters({"nNodes": 2})
    s.addParameters({"mNodes": 2})
    s.addParameters({"T_air": T_air[i]})
    s.addParameters({"T_abs": T_abs[i]})
    s.addParameters({"m_flow_air": m_flow_air[i]})
    s.addParameters({"m_flow_abs": m_flow_abs[i]})
    s.addParameters({"X_w": X_w[i]})
    s.addParameters({"X_s": X_s[i]})
    li.append(s)
po = Pool(processes=4)
po.map(simulateCase, li)
#+END_SRC

** Run the script

The main function is executed when this script is run.

#+NAME: run_script
#+BEGIN_SRC python :tangle no
if __name__ == "__main__":
    main()
#+END_SRC

\printbibliography
